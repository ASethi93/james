# Mailboxes

A Mailbox represents a named set of Emails. This is the primary mechanism for organising Emails within an account. It is analogous to a folder or a label in other systems. A Mailbox may perform a certain role in the system; see below for more details.

For compatibility with IMAP, an Email MUST belong to one or more Mailboxes. The Email id does not change if the Email changes Mailboxes.

A **Mailbox** object has the following properties:

> :information_source:
> Implemented

- **id**: `Id` (immutable; server-set)
  The id of the Mailbox.
- **name**: `String`

> :warning:
> "name" should not contain the IMAP hierarchy delimiter ".".


  User-visible name for the Mailbox, e.g., "Inbox". This MUST be a Net-Unicode string [@!RFC5198] of at least 1 character in length, subject to the maximum size given in the capability object. There MUST NOT be two sibling Mailboxes with both the same parent and the same name. Servers MAY reject names that violate server policy (e.g., names containing a slash (/) or control characters).
- **parentId**: `Id|null` (default: null)
  The Mailbox id for the parent of this Mailbox, or `null` if this Mailbox is at the top level. Mailboxes form acyclic graphs (forests) directed by the child-to-parent relationship. There MUST NOT be a loop.
- **role**: `String|null` (default: null)

> :warning:
> Partially implemented. Role are based on the name of the mailbox. An evolution would be to use a mailbox annotation to hold its
> value, removing the link with the name, and allow the user to define locale based system mailboxes. This value cannot be updated.

  Identifies Mailboxes that have a particular common purpose (e.g., the "inbox"), regardless of the *name* property (which may be localised).

    This value is shared with IMAP (exposed in IMAP via the SPECIAL-USE extension [@!RFC6154]). However, unlike in IMAP, a Mailbox MUST only have a single role, and there MUST NOT be two Mailboxes in the same account with the same role. Servers providing IMAP access to the same data are encouraged to enforce these extra restrictions in IMAP as well. Otherwise, modifying the IMAP attributes to ensure compliance when exposing the data over JMAP is implementation dependent.

    The value MUST be one of the Mailbox attribute names listed in the [IANA IMAP Mailbox Name Attributes](https://www.iana.org/assignments/imap-mailbox-name-attributes/imap-mailbox-name-attributes.xhtml) registry, as established in [@!RFC8457], converted to lowercase. New roles may be established here in the future.

    An account is not required to have Mailboxes with any particular roles.

- **sortOrder**: `UnsignedInt` (default: 0)

> :warning:
> Partially implemented. Based on the role. This value cannot be updated.

  Defines the sort order of Mailboxes when presented in the client's UI, so it
  is consistent between devices. The number MUST be an integer in the range
  0 <= sortOrder < 2^31.

    A Mailbox with a lower order should be displayed before a Mailbox with a higher order (that has the same parent) in any Mailbox listing in the client's UI. Mailboxes with equal order SHOULD be sorted in alphabetical order by name. The sorting should take into account locale-specific character order convention.

- **totalEmails**: `UnsignedInt` (server-set)
  The number of Emails in this Mailbox.
- **unreadEmails**: `UnsignedInt` (server-set)
  The number of Emails in this Mailbox that have neither the `$seen` keyword nor the `$draft` keyword.
- **totalThreads**: `UnsignedInt` (server-set)

> :warning:
> Threads are not implemented. So far, each email is its own thread, so totalThreads will have the same value than totalEmails

  The number of Threads where at least one Email in the Thread is in this Mailbox.
- **unreadThreads**: `UnsignedInt` (server-set)

> :warning:
> Threads are not implemented. So far, each email is its own thread, so unreadThreads will have the same value than unreadEmails

  An indication of the number of "unread" Threads in the Mailbox.

    For compatibility with existing implementations, the way "unread Threads" is
    determined is not mandated in this document. The simplest solution to implement is simply the number of Threads where at least one Email in the Thread is both in this Mailbox and has neither the `$seen` nor `$draft` keywords.

    However, a quality implementation will return the number of unread items the user would see if they opened that Mailbox. A Thread is shown as unread if it contains any unread Emails that will be displayed when the Thread is opened. Therefore, `unreadThreads` should be the number of Threads where at least one Email in the Thread has neither the `$seen` nor the `$draft` keyword AND at least one Email in the Thread is in this Mailbox. Note that the unread Email does not need to be the one in this Mailbox. In addition, the trash Mailbox (that is, a Mailbox whose `role` is `trash`) requires special treatment:

    1. Emails that are **only** in the trash (and no other Mailbox) are ignored when calculating the `unreadThreads` count of other Mailboxes.
    2. Emails that are **not** in the trash are ignored when calculating the `unreadThreads` count for the trash Mailbox.

    The result of this is that Emails in the trash are treated as though they are in a separate Thread for the purposes of unread counts. It is expected that clients will hide Emails in the trash when viewing a Thread in another Mailbox, and vice versa. This allows you to delete a single Email to the trash out of a Thread.

    For example, suppose you have an account where the entire contents is a single Thread with 2 Emails: an unread Email in the trash and a read Email in the inbox. The `unreadThreads` count would be `1` for the trash and `0` for the inbox.

- **myRights**: `MailboxRights` (server-set)
  The set of rights (Access Control Lists (ACLs)) the user has in relation to this Mailbox. These are backwards compatible with IMAP ACLs, as defined in [@!RFC4314]. A **MailboxRights** object has the following properties:

    - **mayReadItems**: `Boolean`
      If true, the user may use this Mailbox as part of a filter in an *Email/query* call, and the Mailbox may be included in the *mailboxIds* property of Email objects. Email objects may be fetched if they are in **at least one** Mailbox with this permission. If a sub-Mailbox is shared but not the parent Mailbox, this may be `false`. Corresponds to IMAP ACLs `lr` (if mapping from IMAP, both are required for this to be `true`).
    - **mayAddItems**: `Boolean`
      The user may add mail to this Mailbox (by either creating a new Email or moving an existing one). Corresponds to IMAP ACL `i`.
    - **mayRemoveItems**: `Boolean`
      The user may remove mail from this Mailbox (by either changing the Mailboxes of an Email or destroying the Email). Corresponds to IMAP ACLs `te` (if mapping from IMAP, both are required for this to be `true`).
    - **maySetSeen**: `Boolean`
      The user may add or remove the `$seen` keyword to/from an Email. If an Email belongs to multiple Mailboxes, the user may only modify `$seen` if they have this permission for **all** of the Mailboxes. Corresponds to IMAP ACL `s`.
    - **maySetKeywords**: `Boolean`
      The user may add or remove any keyword *other than* `$seen` to/from an Email. If an Email belongs to multiple Mailboxes, the user may only modify keywords if they have this permission for **all** of the Mailboxes. Corresponds to IMAP ACL `w`.
    - **mayCreateChild**: `Boolean`
      The user may create a Mailbox with this Mailbox as its parent. Corresponds to IMAP ACL `k`.
    - **mayRename**: `Boolean`
      The user may rename the Mailbox or make it a child of another Mailbox. Corresponds to IMAP ACL `x` (although this covers both rename and delete permissions).
    - **mayDelete**: `Boolean`
      The user may delete the Mailbox itself. Corresponds to IMAP ACL `x` (although this covers both rename and delete permissions).
    - **maySubmit**: `Boolean`
      Messages may be submitted directly to this Mailbox. Corresponds to IMAP ACL `p`.

- **isSubscribed**: `Boolean`
  Has the user indicated they wish to see this Mailbox in their client? This SHOULD default to `false` for Mailboxes in shared accounts the user has access to and `true` for any new Mailboxes created by the user themself. This MUST be stored separately per user where multiple users have access to a shared Mailbox.

    A user may have permission to access a large number of shared accounts, or a shared account with a very large set of Mailboxes, but only be interested in the contents of a few of these. Clients may choose to only display Mailboxes where the `isSubscribed` property is set to `true`, and offer a separate UI to allow the user to see and subscribe/unsubscribe from the full set of Mailboxes. However, clients MAY choose to ignore this property, either entirely for ease of implementation or just for an account where `isPersonal` is `true` (indicating it is the user's own rather than a shared account).

    This property corresponds to IMAP [@?RFC3501] Mailbox subscriptions.

For IMAP compatibility, an Email in both the trash and another Mailbox SHOULD be treated by the client as existing in both places (i.e., when emptying the trash, the client should just remove it from the trash Mailbox and leave it in the other Mailbox).

The following JMAP methods are supported.

## Mailbox/get

> :information_source:
> Implemented

This is a standard "/get" method as described in [@!RFC8620], Section 5.1. The *ids* argument may be `null` to fetch all at once.

## Mailbox/changes

> :warning:
> Naive implementation

This is a standard "/changes" method as described in [@!RFC8620], Section 5.2 but with one extra argument to the response:

- **updatedProperties**: `String[]|null`
  If only the "totalEmails", "unreadEmails", "totalThreads", and/or "unreadThreads" Mailbox properties have changed since the old state, this will be the list of properties that may have changed. If the server is unable to tell if only counts have changed, it MUST just be `null`.

Since counts frequently change but other properties are generally only changed rarely, the server can help the client optimise data transfer by keeping track of changes to Email/Thread counts separate from other state changes. The *updatedProperties* array may be used directly via a back-reference in a subsequent Mailbox/get call in the same request, so only these properties are returned if nothing else has changed.

## Mailbox/query

> :warning:
> Partially implemented. `sortAsTree` and `filterAsTree` options are unsupported.
>
>    `FilterCondition` only accepts a `role` property. `filter` property needs to be a `FilterCondition`,
>    `FilterOperator` are not supported.
>
>    `position`, `anchor`, `anchorOffset`, `limit`, `sort`, `calculateTotal` properties are not supported for this `/query` call.

This is a standard "/query" method as described in [@!RFC8620], Section 5.5, but with the following additional request argument:

- **sortAsTree**: `Boolean` (default: false)
  If `true`, when sorting the query results and comparing Mailboxes A and B:

    - If A is an ancestor of B, it always comes first regardless of the *sort*
      comparators. Similarly, if A is descendant of B, then B always comes
      first.
    - Otherwise, if A and B do not share a *parentId*, find the nearest
      ancestors of each that do have the same *parentId* and compare the sort
      properties on those Mailboxes instead.

    The result of this is that the Mailboxes are sorted as a tree according to the parentId properties, with each set of children with a common parent sorted according to the standard sort comparators.
- **filterAsTree**: `Boolean` (default: false)
  If `true`, a Mailbox is only included in the query if all its ancestors are
  also included in the query according to the filter.

A **FilterCondition** object has the following properties, any of which may be omitted:

- **parentId**: `Id|null`
  The Mailbox *parentId* property must match the given value exactly.
- **name**: `String`
  The Mailbox *name* property contains the given string.
- **role**: `String|null`
  The Mailbox *role* property must match the given value exactly.
- **hasAnyRole**: `Boolean`
  If `true`, a Mailbox matches if it has any non-`null` value for its *role* property.
- **isSubscribed**: `Boolean`
  The `isSubscribed` property of the Mailbox must be identical to the value given to match the condition.

A Mailbox object matches the FilterCondition if and only if all of the given conditions match. If zero properties are specified, it is automatically `true` for all objects.

The following Mailbox properties MUST be supported for sorting:

- `sortOrder`
- `name`

## Mailbox/queryChanges

This is a standard "/queryChanges" method as described in [@!RFC8620], Section 5.6.

## Mailbox/set

> :information_source:
> Implemented

This is a standard "/set" method as described in [@!RFC8620], Section 5.3, but with the following additional request argument:

- **onDestroyRemoveEmails**: `Boolean` (default: false)
  If `false`, any attempt to destroy a Mailbox that still has Emails in it will be rejected with a `mailboxHasEmail` SetError. If `true`, any Emails that were in the Mailbox will be removed from it, and if in no other Mailboxes, they will be destroyed when the Mailbox is destroyed.

The following extra *SetError* types are defined:

For **destroy**:

- `mailboxHasChild`: The Mailbox still has at least one child Mailbox. The
  client MUST remove these before it can delete the parent Mailbox.
- `mailboxHasEmail`: The Mailbox has at least one Email assigned to it, and
  the *onDestroyRemoveEmails* argument was `false`.

> :warning:
> Restrictions:
> - "parentId" updates only succeeds if the given mailbox has no child.
> - all updates to shared mailboxes by a sharee are forbidden.
> - Updates to server-set fields are rejected, even if they match the server value.
> - as "role" and "sortOrder" are server-set by the current James implementation, updating them is not supported.

## Example

Fetching all Mailboxes in an account:

    [[ "Mailbox/get", {
      "accountId": "u33084183",
      "ids": null
    }, "0" ]]

And the response:

    [[ "Mailbox/get", {
      "accountId": "u33084183",
      "state": "78540",
      "list": [{
        "id": "MB23cfa8094c0f41e6",
        "name": "Inbox",
        "parentId": null,
        "role": "inbox",
        "sortOrder": 10,
        "totalEmails": 16307,
        "unreadEmails": 13905,
        "totalThreads": 5833,
        "unreadThreads": 5128,
        "myRights": {
          "mayAddItems": true,
          "mayRename": false,
          "maySubmit": true,
          "mayDelete": false,
          "maySetKeywords": true,
          "mayRemoveItems": true,
          "mayCreateChild": true,
          "maySetSeen": true,
          "mayReadItems": true
        },
        "isSubscribed": true
      }, {
        "id": "MB674cc24095db49ce",
        "name": "Important mail",
        ...
      }, ... ],
      "notFound": []
    }, "0" ]]

Now suppose an Email is marked read, and we get a push update that the Mailbox state has changed. You might fetch the updates like this:

    [[ "Mailbox/changes", {
      "accountId": "u33084183",
      "sinceState": "78540"
    }, "0" ],
    [ "Mailbox/get", {
      "accountId": "u33084183",
      "#ids": {
        "resultOf": "0",
        "name": "Mailbox/changes",
        "path": "/created"
      }
    }, "1" ],
    [ "Mailbox/get", {
      "accountId": "u33084183",
      "#ids": {
        "resultOf": "0",
        "name": "Mailbox/changes",
        "path": "/updated"
      },
      "#properties": {
        "resultOf": "0",
        "name": "Mailbox/changes",
        "path": "/updatedProperties"
      }
    }, "2" ]]

This fetches the list of ids for created/updated/destroyed Mailboxes, then using back-references, it fetches the data for just the created/updated Mailboxes in the same request. The response may look something like this:

    [[ "Mailbox/changes", {
      "accountId": "u33084183",
      "oldState": "78541",
      "newState": "78542",
      "hasMoreChanges": false,
      "updatedProperties": [
        "totalEmails", "unreadEmails",
        "totalThreads", "unreadThreads"
      ],
      "created": [],
      "updated": ["MB23cfa8094c0f41e6"],
      "destroyed": []
    }, "0" ],
    [ "Mailbox/get", {
      "accountId": "u33084183",
      "state": "78542",
      "list": [],
      "notFound": []
    }, "1" ],
    [ "Mailbox/get", {
      "accountId": "u33084183",
      "state": "78542",
      "list": [{
        "id": "MB23cfa8094c0f41e6",
        "totalEmails": 16307,
        "unreadEmails": 13903,
        "totalThreads": 5833,
        "unreadThreads": 5127
      }],
      "notFound": []
    }, "2" ]]

Here's an example where we try to rename one Mailbox and destroy another:

    [[ "Mailbox/set", {
      "accountId": "u33084183",
      "ifInState": "78542",
      "update": {
        "MB674cc24095db49ce": {
          "name": "Maybe important mail"
        }
      },
      "destroy": [ "MB23cfa8094c0f41e6" ]
    }, "0" ]]

Suppose the rename succeeds, but we don't have permission to destroy the Mailbox we tried to destroy; we might get back:

    [[ "Mailbox/set", {
      "accountId": "u33084183",
      "oldState": "78542",
      "newState": "78549",
      "updated": {
          "MB674cc24095db49ce": null
      },
      "notDestroyed": {
        "MB23cfa8094c0f41e6": {
          "type": "forbidden"
        }
      }
    }, "0" ]]
