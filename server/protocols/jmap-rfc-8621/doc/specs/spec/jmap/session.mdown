# The JMAP Session Resource

> :information_source:
> Implemented

You need two things to connect to a JMAP server:

1. The URL for the JMAP Session resource. This may be requested directly from
   the user or discovered automatically based on a username domain (see Section 2.2 below).
2. Credentials to authenticate with. How to obtain credentials is out of scope
   for this document.

A successful authenticated GET request to the JMAP Session resource MUST return a JSON-encoded **Session** object, giving details about the data and capabilities the server can provide to the client given those credentials. It has the following properties:

- **capabilities**: `String[Object]`
  An object specifying the capabilities of this server. Each key is a URI for a capability supported by the server. The value for each of these keys is an object with further information about the server's capabilities in relation to that capability.

    The client MUST ignore any properties it does not understand.

    The capabilities object MUST include a property called `urn:ietf:params:jmap:core`. The value of this property is an object that MUST contain the following information on server capabilities (suggested minimum values for limits are supplied that allow clients to make efficient use of the network):

    - **maxSizeUpload**: `UnsignedInt`

> :warning:
> Not enforced yet

      The maximum file size, in octets, that the server will accept for a single file upload (for any purpose). Suggested minimum: 50,000,000.
    - **maxConcurrentUpload**: `UnsignedInt`

> :warning:
> Not enforced yet

      The maximum number of concurrent requests the server will accept to the upload endpoint.  Suggested minimum: 4.
    - **maxSizeRequest**: `UnsignedInt`

> :warning:
> Not enforced yet

      The maximum size, in octets, that the server will accept for a single
      request to the API endpoint. Suggested minimum: 10,000,000.
    - **maxConcurrentRequests**: `UnsignedInt`

> :warning:
> Not enforced yet

      The maximum number of concurrent requests the server will accept to
      the API endpoint. Suggested minimum: 4.
    - **maxCallsInRequest**: `UnsignedInt`

> :warning:
> Not enforced yet

      The maximum number of method calls the server will accept in a single request to the API endpoint.  Suggested minimum: 16.
    - **maxObjectsInGet**: `UnsignedInt`

> :warning:
> Not enforced yet
      The maximum number of objects that the client may request in a single `/get` type method call. Suggested minimum: 500.
    - **maxObjectsInSet**: `UnsignedInt`

> :warning:
> Not enforced yet

      The maximum number of objects the client may send to create, update, or destroy in a single `/set` type method call. This is the combined total, e.g., if the maximum is 10, you could not create 7 objects and destroy 6, as this would be 13 actions, which exceeds the limit. Suggested minimum: 500.
    - **collationAlgorithms**: `String[]`
      A list of identifiers for algorithms registered in the collation registry, as defined in [@!RFC4790], that the server supports for sorting when querying records.

    Specifications for future capabilities will define their own properties on the capabilities object.

    Servers MAY advertise vendor-specific JMAP extensions, as described in Section 1.8. To avoid conflict, an identifier for a vendor-specific extension MUST be a URL with a domain owned by the vendor. Clients MUST opt in to any capability it wishes to use (see Section 3.3).

- **accounts**: `Id[Account]`
  A map of an **account id** to an Account object for each account (see Section 1.6.2) the user has access to. An **Account** object has the following properties:

    - **name**: `String`
      A user-friendly string to show when presenting content from this account, e.g., the email address representing the owner of the account.
    - **isPersonal**: `Boolean`
      This is `true` if the account belongs to the authenticated user rather than a group account or a personal account of another user that has been shared with them.
    - **isReadOnly**: `Boolean`
      This is `true` if the entire account is read-only.
    - **accountCapabilities**: `String[Object]`
      The set of capability URIs for the methods supported in this account. Each key is a URI for a capability that has methods you can use with this account. The value for each of these keys is an object with further information about the account's permissions and restrictions with respect to this capability, as defined in the capability's specification.

        The client MUST ignore any properties it does not understand.

        The server advertises the full list of capabilities it supports in the
        capabilities object, as defined above. If the capability defines new
        methods, the server MUST include it in the *accountCapabilities* object
        if the user may use those methods with this account. It MUST NOT
        include it in the *accountCapabilities* object if the user cannot use
        those methods with this account.

        For example, you may have access to your own account with mail,
        calendars, and contacts data and also a shared account that only has
        contacts data (a  business address book, for example). In this case, the
        *accountCapabilities* property on the first account would include
        something like `urn:ietf:params:jmap:mail`,
        `urn:ietf:params:jmap:calendars`, and `urn:ietf:params:jmap:contacts`,
        while the second account would just have the last of these.

        Attempts to use the methods defined in a capability with one of the
        accounts that does not support that capability are rejected with an
        *accountNotSupportedByMethod* error (see "Method-Level
         Errors", Section 3.6.2).

- **primaryAccounts**: `String[Id]`
  A map of capability URIs (as found in *accountCapabilities*) to the account id that is considered to be the user's main or default account for data pertaining to that capability. If no account being returned belongs to the user, or in any other way there is no appropriate way to determine a default account, there MAY be no entry for a particular URI, even though that capability is supported by the server (and in the capabilities object). `urn:ietf:params:jmap:core` SHOULD NOT be present.
- **username**: `String`
  The username associated with the given credentials, or the empty string if none.
- **apiUrl**: `String`
  The URL to use for JMAP API requests.
- **downloadUrl**: `String`
  The URL endpoint to use when downloading files, in URI Template (level 1) format [@!RFC6570]. The URL MUST contain variables called `accountId`, `blobId`, `type`, and `name`. The use of these variables is described in Section 6.2. Due to potential encoding issues with slashes in content types, it is RECOMMENDED to put the `type` variable in the query section of the URL.
- **uploadUrl**: `String`
  The URL endpoint to use when uploading files, in URI Template (level 1) format [@!RFC6570]. The URL MUST contain a variable called `accountId`. The use of this variable is described in Section 6.1.
- **eventSourceUrl**: `String`
  The URL to connect to for push events, as described in Section 7.3, in URI Template (level 1) format [@!RFC6570]. The URL MUST contain variables called `types`, `closeafter`, and `ping`. The use of these variables is described in Section 7.3.
- **state**: `String`
  A (preferably short) string representing the state of this object on the server. If the value of any other property on the Session object changes, this string will change. The current value is also returned on the API Response object (see Section 3.4), allowing clients to quickly determine if the session information has changed (e.g., an account has been added or removed), so they need to refetch the object.

To ensure future compatibility, other properties MAY be included on the Session object. Clients MUST ignore any properties they are not expecting.

Implementors must take care to avoid inappropriate caching of the Session object at the HTTP layer. Since the client should only refetch when it detects there is a change (via the sessionState property of an API response), it is RECOMMENDED to disable HTTP caching altogether, for example, by setting `Cache-Control: no-cache, no-store, must-revalidate` on the response.

## Example

In the following example Session object, the user has access to their own mail and contacts via JMAP, as well as read-only access to shared mail from another user. The server is advertising a custom `https://example.com/apis/foobar` capability.

    {
      "capabilities": {
        "urn:ietf:params:jmap:core": {
          "maxSizeUpload": 50000000,
          "maxConcurrentUpload": 8,
          "maxSizeRequest": 10000000,
          "maxConcurrentRequests": 8,
          "maxCallsInRequest": 32,
          "maxObjectsInGet": 256,
          "maxObjectsInSet": 128,
          "collationAlgorithms": [
            "i;ascii-numeric",
            "i;ascii-casemap",
            "i;unicode-casemap"
          ]
        },
        "urn:ietf:params:jmap:mail": {},
        "urn:ietf:params:jmap:contacts": {},
        "https://example.com/apis/foobar": {
          "maxFoosFinangled": 42
        }
      },
      "accounts": {
        "A13824": {
          "name": "john@example.com",
          "isPersonal": true,
          "isReadOnly": false,
          "accountCapabilities": {
            "urn:ietf:params:jmap:mail": {
              "maxMailboxesPerEmail": null,
              "maxMailboxDepth": 10,
              ...
            },
            "urn:ietf:params:jmap:contacts": {
              ...
            }
          }
        },
        "A97813": {
          "name": "jane@example.com",
          "isPersonal": false,
          "isReadOnly": true,
          "accountCapabilities": {
            "urn:ietf:params:jmap:mail": {
              "maxMailboxesPerEmail": 1,
              "maxMailboxDepth": 10,
              ...
            }
          }
        }
      },
      "primaryAccounts": {
        "urn:ietf:params:jmap:mail": "A13824",
        "urn:ietf:params:jmap:contacts": "A13824"
      },
      "username": "john@example.com",
      "apiUrl": "https://jmap.example.com/api/",
      "downloadUrl": "https://jmap.example.com
        /download/{accountId}/{blobId}/{name}?accept={type}",
      "uploadUrl": "https://jmap.example.com/upload/{accountId}/",
      "eventSourceUrl": "https://jmap.example.com
        /eventsource/?types={types}&closeafter={closeafter}&ping={ping}",
      "state": "75128aab4b1b"
    }

## Service Autodiscovery

There are two standardised autodiscovery methods in use for Internet protocols:

- **DNS SRV** (see [@!RFC2782], [@!RFC6186], and [@!RFC6764])
- **.well-known/servicename** (see [@!RFC8615])

A JMAP-supporting host for the domain `example.com` SHOULD publish a SRV record `_jmap._tcp.example.com` that gives a *hostname* and *port* (usually port `443`). The JMAP Session resource is then `https://${hostname}[:${port}]/.well-known/jmap` (following any redirects).

If the client has a username in the form of an email address, it MAY use the domain portion of this to attempt autodiscovery of the JMAP server.
