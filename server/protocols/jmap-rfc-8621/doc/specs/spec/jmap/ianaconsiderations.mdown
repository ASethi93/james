# IANA Considerations

## Assignment of jmap Service Name

IANA has assigned the 'jmap' service name in the "Service Name and Transport Protocol Port Number Registry" [@!RFC6335].

Service Name: jmap

Transport Protocol(s): tcp

Assignee: IESG

Contact: IETF Chair

Description: JSON Meta Application Protocol

Reference: [@!RFC8620]

Assignment Notes: This service name was previously assigned under the name *JSON Mail Access Protocol*. This has been de-assigned and re-assigned with the approval of the previous assignee.

## Registration of Well-Known URI suffix for JMAP

IANA has registered the following suffix in the "Well-Known URIs" registry for JMAP, as described in [@!RFC8615]:

URI Suffix: jmap

Change Controller: IETF

Specification Document: [@!RFC8620], Section 2.2.

## Registration of the jmap URN Sub-namespace

IANA has registered the following URN sub-namespace in the "IETF URN Sub-namespace for Registered Protocol Parameter Identifiers" registry within the "Uniform Resource Name (URN) Namespace for IETF Use" registry as described in [@!RFC3553].

Registered Parameter Identifier: jmap

Reference: [@!RFC8620], Section 9.4

IANA Registry Reference: http://www.iana.org/assignments/jmap

## Creation of "JMAP Capabilities" Registry

IANA has created the "JMAP Capabilities" registry as described in Section 2. JMAP capabilities are advertised in the *capabilities* property of the Session object. They are used to extend the functionality of a JMAP server. A capability is referenced by a URI. The JMAP capability URI can be a URN starting with `urn:ietf:params:jmap:` plus a unique suffix that is the index value in the jmap URN sub-namespace. Registration of a JMAP capability with another form of URI has no impact on the jmap URN sub-namespace.

This registry follows the expert review process unless the "intended use" field is *common* or *placeholder*, in which case registration follows the specification required process.

A JMAP capability registration can have an intended use of *common*, *placeholder*, *limited*, or *obsolete*. IANA will list common-use registrations prominently and separately from those with other intended use values.

The JMAP capability registration procedure is not a formal standards process but rather an administrative procedure intended to allow community comment and sanity checking without excessive time delay.

A *placeholder* registration reserves part of the jmap URN namespace for another purpose but is typically not included in the *capabilities* property of the Session object.

### Preliminary Community Review

Notice of a potential JMAP common-use registration SHOULD be sent to the JMAP mailing list <jmap@ietf.org> for review. This mailing list is appropriate to solicit community feedback on a proposed JMAP capability. Registrations that are not intended for common use MAY be sent to the list for review as well; doing so is entirely OPTIONAL, but is encouraged.

The intent of the public posting to this list is to solicit comments and feedback on the choice of the capability name, the unambiguity of the specification document, and a review of any interoperability or security considerations. The submitter may submit a revised registration proposal or abandon the registration completely at any time.

### Submit Request to IANA

Registration requests can be sent to <iana@iana.org>.

### Designated Expert Review

For a limited-use registration, the primary concern of the designated expert (DE) is preventing name collisions and encouraging the submitter to document security and privacy considerations; a published specification is not required. For a common-use registration, the DE is expected to confirm that suitable documentation, as described in Section 4.6 of [@!RFC8126], is available. The DE should also verify that the capability does not conflict with work that is active or already published within the IETF.

Before a period of 30 days has passed, the DE will either approve or deny the registration request and publish a notice of the decision to the JMAP WG mailing list or its successor, as well as inform IANA. A denial notice must be justified by an explanation, and, in the cases where it is possible, concrete suggestions on how the request can be modified so as to become acceptable should be provided.

If the DE does not respond within 30 days, the registrant may request the IESG take action to process the request in a timely manner.

### Change Procedures

Once a JMAP capability has been published by the IANA, the change controller may request a change to its definition. The same procedure that would be appropriate for the original registration request is used to process a change request.

JMAP capability registrations may not be deleted; capabilities that are no longer believed appropriate for use can be declared obsolete by a change to their "intended use" field; such capabilities will be clearly marked in the lists published by the IANA.

Significant changes to a capability's definition should be requested only when there are serious omissions or errors in the published specification. When review is required, a change request may be denied if it renders entities that were valid under the previous definition invalid under the new definition.

The owner of a JMAP capability may pass responsibility to another person or agency by informing the IANA; this can be done without discussion or review.

The IESG may reassign responsibility for a JMAP capability. The most common case of this will be to enable changes to be made to capabilities where the author of the registration has died, moved out of contact, or is otherwise unable to make changes that are important to the community.

### JMAP Capabilities Registry Template:

Capability name: (see capability property in Section 2)

Specification document:

Intended use: (one of common, limited, placeholder, or obsolete)

Change controller: (*IETF* for Standards Track / BCP RFCs)

Security and privacy considerations:

### Initial Registration for JMAP Core

Capability Name: `urn:ietf:params:jmap:core`

Specification document: [@!RFC8620], Section 2

Intended use: common

Change Controller: IETF

Security and privacy considerations: [@!RFC8620], Section 8.

### Registration for JMAP Error Placeholder in JMAP Capabilities Registry

Capability Name: `urn:ietf:params:jmap:error:`

Specification document: [@!RFC8620], Section 9.5

Intended use: placeholder

Change Controller: IETF

Security and privacy considerations: [@!RFC8620], Section 8.

## Creation of "JMAP Error Codes" registry

IANA has created the "JMAP Error Codes" registry. JMAP error codes appear in the "type" member of a JSON problem details object (as described in Section 3.6.1), the "type" member in a JMAP error object (as described in Section 3.6.2), or the "type" member of a JMAP method-specific error object (such as SetError in Section 5.3). When used in a problem details object, the prefix "urn:ietf:params:jmap:error:" is always included; when used in JMAP objects, the prefix is always omitted.

This registry follows the expert review process. Preliminary community review for this registry follows the same procedures as the "JMAP Capabilities" registry but it is optional. The change procedures for this registry are the same as the change procedures for the "JMAP Capabilities" registry.

### Designated Expert Review

The designated expert should review the following aspects of the registration:

1. Verify the error code does not conflict with existing names.

2. Verify the error code follows the syntax limitations (does not require URI encoding).

3. Encourage the submitter to follow the naming convention of previously registered errors.

4. Encourage the submitter to describe client behaviours that are recommended in response to the error code. These may distinguish the error code from other error codes.

5. Encourage the submitter to describe when the server should issue the error as opposed to some other error code.

6. Encourage the submitter to note any security considerations associated with the error, if any (e.g., an error code that might disclose existence of data the authenticated user does not have permission to know about).

Steps 3-6 are meant to promote a higher-quality registry. However, the expert is encouraged to approve any registration that would not actively harm JMAP interoperability to make this a relatively lightweight process.

### JMAP Error Codes Registry Template:

JMAP Error Code:

Intended use: (one of *common*, *limited*, *obsolete*)

Change Controller: (*IETF* for Standards Track / BCP RFCs)

Reference: (Optional. Only required if defined in an RFC.)

Description:

### Initial Contents for the JMAP Error Codes

| JMAP Error Code | Intended Use | Change Controller | Reference | Description |
| --- | --- | --- | --- | --- |
| accountNotFound | common | IETF | [@!RFC8620] Section 3.6.2 | The accountId does not correspond to a valid account. |
| accountNotSupportedByMethod | common | IETF | [@!RFC8620] Section 3.6.2 | The accountId given corresponds to a valid account, but the account does not support this method or data type. |
| accountReadOnly | common | IETF | [@!RFC8620] Section 3.6.2 | This method modifies state, but the account is read-only (as returned on the corresponding Account in the Session object). |
| anchorNotFound | common | IETF | [@!RFC8620] Section 5.5 | An anchor argument was supplied, but it cannot be found in the results of the query. |
| alreadyExists | common | IETF | [@!RFC8620] Section 5.4 | The server forbids duplicates, and the record already exists in the target account. An existingId property of type Id MUST be included on the SetError object with the id of the existing record. |
| cannotCalculateChanges | common | IETF | [@!RFC8620] sections 5.2 and 5.6 |  The server cannot calculate the changes from the state string given by the client. |
| forbidden | common | IETF | [@!RFC8620] sections 3.5.2, 5.3, and 7.2.1 | The action would violate an ACL or other permissions policy. |
| fromAccountNotFound | common | IETF | [@!RFC8620] sections 5.4 and 6.3 | The fromAccountId does not correspond to a valid account. |
| fromAccountNotSupportedByMethod | common | IETF | [@!RFC8620] Section 5.4 | The fromAccountId given corresponds to a valid account, but the account does not support this data type. |
| invalidArguments | common | IETF | [@!RFC8620] Section 3.6.2 | One of the arguments is of the wrong type or otherwise invalid, or a required argument is missing. |
| invalidPatch | common | IETF | [@!RFC8620] Section 5.3 |  The PatchObject given to update the record was not a valid patch. |
| invalidProperties | common | IETF | [@!RFC8620] Section 5.3 | The record given is invalid. |
| notFound | common | IETF | [@!RFC8620] Section 5.3 | The id given cannot be found. |
| notJSON | common | IETF | [@!RFC8620] Section 3.6.1 | The content type of the request was not application/json or the request did not parse as I-JSON. |
| notRequest | common | IETF | [@!RFC8620] Section 3.6.1 | The request parsed as JSON but did not match the type signature of the Request object. |
| overQuota | common | IETF | [@!RFC8620] Section 5.3 | The create would exceed a server-defined limit on the number or total size of objects of this type. |
| rateLimit | common | IETF | [@!RFC8620] Section 5.3 | Too many objects of this type have been created recently, and a server-defined rate limit has been reached. It may work if tried again later. |
| requestTooLarge | common | IETF | [@!RFC8620] sections 5.1 and 5.3 | The total number of actions exceeds the maximum number the server is willing to process in a single method call. |
| invalidResultReference | common | IETF | [@!RFC8620] Section 3.6.2 | The method used a result reference for one of its arguments, but this failed to resolve. |
| serverFail | common | IETF | [@!RFC8620] Section 3.6.2 | An unexpected or unknown error occurred during the processing of the call. The method call made no changes to the server’s state. |
| serverPartialFail | limited | IETF | [@!RFC8620] Section 3.6.2 | Some, but not all, expected changes described by the method occurred. The client MUST re-synchronise impacted data to determine server state. Use of this error is strongly discouraged. |
| serverUnavailable | common | IETF | [@!RFC8620] Section 3.6.2 | Some internal server resource was temporarily unavailable. Attempting the same operation later (perhaps after a backoff with a random factor) may succeed. |
| singleton | common | IETF | [@!RFC8620] Section 5.3 | This is a singleton type, so you cannot create another one or destroy the existing one. |
| stateMismatch | common | IETF | [@!RFC8620] Section 5.3 | An ifInState argument was supplied, and it does not match the current state. |
| tooLarge | common | IETF | [@!RFC8620] Section 5.3 | The action would result in an object that exceeds a server-defined limit for the maximum size of a single object of this type. |
| tooManyChanges | common | IETF | [@!RFC8620] Section 5.6 | There are more changes than the client’s maxChanges argument. |
| unknownCapability | common | IETF | [@!RFC8620] Section 3.6.1 | The client included a capability in the “using” property of the request that the server does not support. |
| unknownMethod | common | IETF | [@!RFC8620] Section 3.6.2 | The server does not recognise this method name. |
| unsupportedFilter | common | IETF | [@!RFC8620] Section 5.5 | The filter is syntactically valid, but the server cannot process it. |
| unsupportedSort | common | IETF | [@!RFC8620] Section 5.5 |The sort is syntactically valid, but includes a property the server does not support sorting on, or a collation method it does not recognise. |
| willDestroy | common | IETF | [@!RFC8620] Section 5.3 | The client requested an object be both updated and destroyed in the same /set request, and the server has decided to therefore ignore the update. |
